<?php

declare(strict_types=1);

namespace SixtyEightPublishers\ImageStorage\SamConfig;

use Nette;
use Yosymfony;

final class SamConfigBuilder
{
	use Nette\SmartObject;

	public const    CAPABILITY_IAM = 'CAPABILITY_IAM',
					CAPABILITY_NAMED_IAM = 'CAPABILITY_NAMED_IAM';

	/** @var array  */
	private $properties = [
		'version' => 1.0,
		'stack_name' => NULL, # required
		's3_bucket' => NULL, # required
		's3_prefix' => NULL, # required
		'region' => NULL, # required
		'confirm_changeset' => FALSE,
		'capabilities' => 'CAPABILITY_IAM',
		'parameter_overrides' => '',
	];

	/**
	 * @param array $properties
	 */
	public function __construct(array $properties = [])
	{
		$this->properties = array_merge($this->properties, $properties);
	}

	/**
	 * @return string
	 * @throws \Nette\Utils\AssertionException
	 */
	public function __toString(): string
	{
		return $this->buildToml()->getTomlString();
	}

	/**
	 * @return \Yosymfony\Toml\TomlBuilder
	 * @throws \Nette\Utils\AssertionException
	 */
	public function buildToml(): Yosymfony\Toml\TomlBuilder
	{
		$this->validate();

		# @todo: Workaround, related issue: https://github.com/yosymfony/toml/issues/29
		$toml = new class extends Yosymfony\Toml\TomlBuilder {
			protected function dumpValue($val): string
			{
				if (is_float($val)) {
					$result = (string) $val;

					return $val != floor($val) ? $result : $result . '.0';
				}

				return parent::dumpValue($val);
			}
		};

		$toml->addComment('Generated by 68publishers/image-storage')
			->addValue('version', $this->properties['version'])
			->addTable('default.deploy.parameters')
			->addValue('stack_name', $this->properties['stack_name'])
			->addValue('s3_bucket', $this->properties['s3_bucket'])
			->addValue('s3_prefix', $this->properties['s3_prefix'])
			->addValue('region', $this->properties['region'])
			->addValue('confirm_changeset', $this->properties['confirm_changeset'])
			->addValue('capabilities', $this->properties['capabilities']);

		if ((is_string($this->properties['parameter_overrides']) && !empty($this->properties['parameter_overrides'])) || 0 < count($this->properties['parameter_overrides'])) {
			$toml->addValue('parameter_overrides', (string) $this->properties['parameter_overrides']);
		}

		return $toml;
	}

	/**
	 * @return void
	 * @throws \Nette\Utils\AssertionException
	 */
	public function validate(): void
	{
		$values = $this->properties;

		Nette\Utils\Validators::assertField($values, 'version', 'float');
		Nette\Utils\Validators::assertField($values, 'stack_name', 'string');
		Nette\Utils\Validators::assertField($values, 's3_bucket', 'string');
		Nette\Utils\Validators::assertField($values, 's3_prefix', 'string');
		Nette\Utils\Validators::assertField($values, 'region', 'string');
		Nette\Utils\Validators::assertField($values, 'confirm_changeset', 'bool');
		Nette\Utils\Validators::assertField($values, 'capabilities', 'string');
		Nette\Utils\Validators::assertField($values, 'parameter_overrides', 'string|' . ParameterOverrides::class);

		if (!in_array($values['capabilities'], [self::CAPABILITY_IAM, self::CAPABILITY_NAMED_IAM], TRUE)) {
			throw new Nette\Utils\AssertionException(sprintf(
				'Value %s is not value capability.',
				$values['capabilities']
			));
		}
	}

	/**
	 * @internal
	 *
	 * @param string $name
	 * @param mixed  $value
	 *
	 * @return \SixtyEightPublishers\ImageStorage\SamConfig\SamConfigBuilder
	 */
	public function setProperty(string $name, $value): self
	{
		$this->properties[$name] = $value;

		return $this;
	}

	/**
	 * @param float $version
	 *
	 * @return \SixtyEightPublishers\ImageStorage\SamConfig\SamConfigBuilder
	 */
	public function setVersion(float $version): self
	{
		return $this->setProperty('version', $version);
	}

	/**
	 * @param string $stackName
	 *
	 * @return \SixtyEightPublishers\ImageStorage\SamConfig\SamConfigBuilder
	 */
	public function setStackName(string $stackName): self
	{
		return $this->setProperty('stack_name', $stackName);
	}

	/**
	 * @param string $s3Bucket
	 *
	 * @return \SixtyEightPublishers\ImageStorage\SamConfig\SamConfigBuilder
	 */
	public function setS3Bucket(string $s3Bucket): self
	{
		return $this->setProperty('s3_bucket', $s3Bucket);
	}

	/**
	 * @param string $s3Prefix
	 *
	 * @return \SixtyEightPublishers\ImageStorage\SamConfig\SamConfigBuilder
	 */
	public function setS3Prefix(string $s3Prefix): self
	{
		return $this->setProperty('s3_prefix', $s3Prefix);
	}

	/**
	 * @param string $region
	 *
	 * @return \SixtyEightPublishers\ImageStorage\SamConfig\SamConfigBuilder
	 */
	public function setRegion(string $region): self
	{
		return $this->setProperty('region', $region);
	}

	/**
	 * @param bool $confirmChangeSet
	 *
	 * @return \SixtyEightPublishers\ImageStorage\SamConfig\SamConfigBuilder
	 */
	public function setConfirmChangeSet(bool $confirmChangeSet): self
	{
		return $this->setProperty('confirm_changeset', $confirmChangeSet);
	}

	/**
	 * @param string $capabilities
	 *
	 * @return \SixtyEightPublishers\ImageStorage\SamConfig\SamConfigBuilder
	 */
	public function setCapabilities(string $capabilities): self
	{
		return $this->setProperty('capabilities', $capabilities);
	}

	/**
	 * @param string|\SixtyEightPublishers\ImageStorage\SamConfig\ParameterOverrides $parameterOverrides
	 *
	 * @return \SixtyEightPublishers\ImageStorage\SamConfig\SamConfigBuilder
	 */
	public function setParameterOverrides($parameterOverrides): self
	{
		return $this->setProperty('parameter_overrides', $parameterOverrides);
	}
}
